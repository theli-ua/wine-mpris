// Bindings generated by `windows-bindgen` 0.55.0

#![allow(
    non_snake_case,
    non_upper_case_globals,
    non_camel_case_types,
    dead_code,
    clippy::all
)]
use windows::Foundation;
pub mod Media {
    use windows::Media::*;
    windows_core::imp::com_interface!(
        ISystemMediaTransportControls,
        ISystemMediaTransportControls_Vtbl,
        0x99fa3ff4_1742_42a6_902e_087d41f965ec
    );
    #[repr(C)]
    pub struct ISystemMediaTransportControls_Vtbl {
        pub base__: windows_core::IInspectable_Vtbl,
        pub PlaybackStatus: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut MediaPlaybackStatus,
        ) -> windows_core::HRESULT,
        pub SetPlaybackStatus: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            MediaPlaybackStatus,
        ) -> windows_core::HRESULT,
        pub DisplayUpdater: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub SoundLevel: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut SoundLevel,
        ) -> windows_core::HRESULT,
        pub IsEnabled:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
        pub SetIsEnabled:
            unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
        pub IsPlayEnabled:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
        pub SetIsPlayEnabled:
            unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
        pub IsStopEnabled:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
        pub SetIsStopEnabled:
            unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
        pub IsPauseEnabled:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
        pub SetIsPauseEnabled:
            unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
        pub IsRecordEnabled:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
        pub SetIsRecordEnabled:
            unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
        pub IsFastForwardEnabled:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
        pub SetIsFastForwardEnabled:
            unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
        pub IsRewindEnabled:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
        pub SetIsRewindEnabled:
            unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
        pub IsPreviousEnabled:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
        pub SetIsPreviousEnabled:
            unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
        pub IsNextEnabled:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
        pub SetIsNextEnabled:
            unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
        pub IsChannelUpEnabled:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
        pub SetIsChannelUpEnabled:
            unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
        pub IsChannelDownEnabled:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
        pub SetIsChannelDownEnabled:
            unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
        pub ButtonPressed: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            *mut super::Foundation::EventRegistrationToken,
        ) -> windows_core::HRESULT,
        pub RemoveButtonPressed: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            super::Foundation::EventRegistrationToken,
        ) -> windows_core::HRESULT,
        pub PropertyChanged: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            *mut super::Foundation::EventRegistrationToken,
        ) -> windows_core::HRESULT,
        pub RemovePropertyChanged: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            super::Foundation::EventRegistrationToken,
        ) -> windows_core::HRESULT,
    }
    #[repr(transparent)]
    #[derive(PartialEq, Eq, core::fmt::Debug, Clone)]
    pub struct SystemMediaTransportControls(windows_core::IUnknown);
    windows_core::imp::interface_hierarchy!(
        SystemMediaTransportControls,
        windows_core::IUnknown,
        windows_core::IInspectable
    );
    impl SystemMediaTransportControls {
        pub fn PlaybackStatus(&self) -> windows_core::Result<MediaPlaybackStatus> {
            let this = self;
            unsafe {
                let mut result__ = std::mem::zeroed();
                (windows_core::Interface::vtable(this).PlaybackStatus)(
                    windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .map(|| result__)
            }
        }
        pub fn SetPlaybackStatus(&self, value: MediaPlaybackStatus) -> windows_core::Result<()> {
            let this = self;
            unsafe {
                (windows_core::Interface::vtable(this).SetPlaybackStatus)(
                    windows_core::Interface::as_raw(this),
                    value,
                )
                .ok()
            }
        }
        pub fn DisplayUpdater(
            &self,
        ) -> windows_core::Result<SystemMediaTransportControlsDisplayUpdater> {
            let this = self;
            unsafe {
                let mut result__ = std::mem::zeroed();
                (windows_core::Interface::vtable(this).DisplayUpdater)(
                    windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .and_then(|| windows_core::Type::from_abi(result__))
            }
        }
        pub fn SoundLevel(&self) -> windows_core::Result<SoundLevel> {
            let this = self;
            unsafe {
                let mut result__ = std::mem::zeroed();
                (windows_core::Interface::vtable(this).SoundLevel)(
                    windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .map(|| result__)
            }
        }
        pub fn IsEnabled(&self) -> windows_core::Result<bool> {
            let this = self;
            unsafe {
                let mut result__ = std::mem::zeroed();
                (windows_core::Interface::vtable(this).IsEnabled)(
                    windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .map(|| result__)
            }
        }
        pub fn SetIsEnabled(&self, value: bool) -> windows_core::Result<()> {
            let this = self;
            unsafe {
                (windows_core::Interface::vtable(this).SetIsEnabled)(
                    windows_core::Interface::as_raw(this),
                    value,
                )
                .ok()
            }
        }
        pub fn IsPlayEnabled(&self) -> windows_core::Result<bool> {
            let this = self;
            unsafe {
                let mut result__ = std::mem::zeroed();
                (windows_core::Interface::vtable(this).IsPlayEnabled)(
                    windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .map(|| result__)
            }
        }
        pub fn SetIsPlayEnabled(&self, value: bool) -> windows_core::Result<()> {
            let this = self;
            unsafe {
                (windows_core::Interface::vtable(this).SetIsPlayEnabled)(
                    windows_core::Interface::as_raw(this),
                    value,
                )
                .ok()
            }
        }
        pub fn IsStopEnabled(&self) -> windows_core::Result<bool> {
            let this = self;
            unsafe {
                let mut result__ = std::mem::zeroed();
                (windows_core::Interface::vtable(this).IsStopEnabled)(
                    windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .map(|| result__)
            }
        }
        pub fn SetIsStopEnabled(&self, value: bool) -> windows_core::Result<()> {
            let this = self;
            unsafe {
                (windows_core::Interface::vtable(this).SetIsStopEnabled)(
                    windows_core::Interface::as_raw(this),
                    value,
                )
                .ok()
            }
        }
        pub fn IsPauseEnabled(&self) -> windows_core::Result<bool> {
            let this = self;
            unsafe {
                let mut result__ = std::mem::zeroed();
                (windows_core::Interface::vtable(this).IsPauseEnabled)(
                    windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .map(|| result__)
            }
        }
        pub fn SetIsPauseEnabled(&self, value: bool) -> windows_core::Result<()> {
            let this = self;
            unsafe {
                (windows_core::Interface::vtable(this).SetIsPauseEnabled)(
                    windows_core::Interface::as_raw(this),
                    value,
                )
                .ok()
            }
        }
        pub fn IsRecordEnabled(&self) -> windows_core::Result<bool> {
            let this = self;
            unsafe {
                let mut result__ = std::mem::zeroed();
                (windows_core::Interface::vtable(this).IsRecordEnabled)(
                    windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .map(|| result__)
            }
        }
        pub fn SetIsRecordEnabled(&self, value: bool) -> windows_core::Result<()> {
            let this = self;
            unsafe {
                (windows_core::Interface::vtable(this).SetIsRecordEnabled)(
                    windows_core::Interface::as_raw(this),
                    value,
                )
                .ok()
            }
        }
        pub fn IsFastForwardEnabled(&self) -> windows_core::Result<bool> {
            let this = self;
            unsafe {
                let mut result__ = std::mem::zeroed();
                (windows_core::Interface::vtable(this).IsFastForwardEnabled)(
                    windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .map(|| result__)
            }
        }
        pub fn SetIsFastForwardEnabled(&self, value: bool) -> windows_core::Result<()> {
            let this = self;
            unsafe {
                (windows_core::Interface::vtable(this).SetIsFastForwardEnabled)(
                    windows_core::Interface::as_raw(this),
                    value,
                )
                .ok()
            }
        }
        pub fn IsRewindEnabled(&self) -> windows_core::Result<bool> {
            let this = self;
            unsafe {
                let mut result__ = std::mem::zeroed();
                (windows_core::Interface::vtable(this).IsRewindEnabled)(
                    windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .map(|| result__)
            }
        }
        pub fn SetIsRewindEnabled(&self, value: bool) -> windows_core::Result<()> {
            let this = self;
            unsafe {
                (windows_core::Interface::vtable(this).SetIsRewindEnabled)(
                    windows_core::Interface::as_raw(this),
                    value,
                )
                .ok()
            }
        }
        pub fn IsPreviousEnabled(&self) -> windows_core::Result<bool> {
            let this = self;
            unsafe {
                let mut result__ = std::mem::zeroed();
                (windows_core::Interface::vtable(this).IsPreviousEnabled)(
                    windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .map(|| result__)
            }
        }
        pub fn SetIsPreviousEnabled(&self, value: bool) -> windows_core::Result<()> {
            let this = self;
            unsafe {
                (windows_core::Interface::vtable(this).SetIsPreviousEnabled)(
                    windows_core::Interface::as_raw(this),
                    value,
                )
                .ok()
            }
        }
        pub fn IsNextEnabled(&self) -> windows_core::Result<bool> {
            let this = self;
            unsafe {
                let mut result__ = std::mem::zeroed();
                (windows_core::Interface::vtable(this).IsNextEnabled)(
                    windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .map(|| result__)
            }
        }
        pub fn SetIsNextEnabled(&self, value: bool) -> windows_core::Result<()> {
            let this = self;
            unsafe {
                (windows_core::Interface::vtable(this).SetIsNextEnabled)(
                    windows_core::Interface::as_raw(this),
                    value,
                )
                .ok()
            }
        }
        pub fn IsChannelUpEnabled(&self) -> windows_core::Result<bool> {
            let this = self;
            unsafe {
                let mut result__ = std::mem::zeroed();
                (windows_core::Interface::vtable(this).IsChannelUpEnabled)(
                    windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .map(|| result__)
            }
        }
        pub fn SetIsChannelUpEnabled(&self, value: bool) -> windows_core::Result<()> {
            let this = self;
            unsafe {
                (windows_core::Interface::vtable(this).SetIsChannelUpEnabled)(
                    windows_core::Interface::as_raw(this),
                    value,
                )
                .ok()
            }
        }
        pub fn IsChannelDownEnabled(&self) -> windows_core::Result<bool> {
            let this = self;
            unsafe {
                let mut result__ = std::mem::zeroed();
                (windows_core::Interface::vtable(this).IsChannelDownEnabled)(
                    windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .map(|| result__)
            }
        }
        pub fn SetIsChannelDownEnabled(&self, value: bool) -> windows_core::Result<()> {
            let this = self;
            unsafe {
                (windows_core::Interface::vtable(this).SetIsChannelDownEnabled)(
                    windows_core::Interface::as_raw(this),
                    value,
                )
                .ok()
            }
        }
        pub fn ButtonPressed<P0>(
            &self,
            handler: P0,
        ) -> windows_core::Result<super::Foundation::EventRegistrationToken>
        where
            P0: windows_core::IntoParam<
                super::Foundation::TypedEventHandler<
                    SystemMediaTransportControls,
                    SystemMediaTransportControlsButtonPressedEventArgs,
                >,
            >,
        {
            let this = self;
            unsafe {
                let mut result__ = std::mem::zeroed();
                (windows_core::Interface::vtable(this).ButtonPressed)(
                    windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .map(|| result__)
            }
        }
        pub fn RemoveButtonPressed(
            &self,
            token: super::Foundation::EventRegistrationToken,
        ) -> windows_core::Result<()> {
            let this = self;
            unsafe {
                (windows_core::Interface::vtable(this).RemoveButtonPressed)(
                    windows_core::Interface::as_raw(this),
                    token,
                )
                .ok()
            }
        }
        pub fn PropertyChanged<P0>(
            &self,
            handler: P0,
        ) -> windows_core::Result<super::Foundation::EventRegistrationToken>
        where
            P0: windows_core::IntoParam<
                super::Foundation::TypedEventHandler<
                    SystemMediaTransportControls,
                    SystemMediaTransportControlsPropertyChangedEventArgs,
                >,
            >,
        {
            let this = self;
            unsafe {
                let mut result__ = std::mem::zeroed();
                (windows_core::Interface::vtable(this).PropertyChanged)(
                    windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .map(|| result__)
            }
        }
        pub fn RemovePropertyChanged(
            &self,
            token: super::Foundation::EventRegistrationToken,
        ) -> windows_core::Result<()> {
            let this = self;
            unsafe {
                (windows_core::Interface::vtable(this).RemovePropertyChanged)(
                    windows_core::Interface::as_raw(this),
                    token,
                )
                .ok()
            }
        }
        pub fn AutoRepeatMode(&self) -> windows_core::Result<MediaPlaybackAutoRepeatMode> {
            let this = &windows_core::Interface::cast::<ISystemMediaTransportControls2>(self)?;
            unsafe {
                let mut result__ = std::mem::zeroed();
                (windows_core::Interface::vtable(this).AutoRepeatMode)(
                    windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .map(|| result__)
            }
        }
        pub fn SetAutoRepeatMode(
            &self,
            value: MediaPlaybackAutoRepeatMode,
        ) -> windows_core::Result<()> {
            let this = &windows_core::Interface::cast::<ISystemMediaTransportControls2>(self)?;
            unsafe {
                (windows_core::Interface::vtable(this).SetAutoRepeatMode)(
                    windows_core::Interface::as_raw(this),
                    value,
                )
                .ok()
            }
        }
        pub fn ShuffleEnabled(&self) -> windows_core::Result<bool> {
            let this = &windows_core::Interface::cast::<ISystemMediaTransportControls2>(self)?;
            unsafe {
                let mut result__ = std::mem::zeroed();
                (windows_core::Interface::vtable(this).ShuffleEnabled)(
                    windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .map(|| result__)
            }
        }
        pub fn SetShuffleEnabled(&self, value: bool) -> windows_core::Result<()> {
            let this = &windows_core::Interface::cast::<ISystemMediaTransportControls2>(self)?;
            unsafe {
                (windows_core::Interface::vtable(this).SetShuffleEnabled)(
                    windows_core::Interface::as_raw(this),
                    value,
                )
                .ok()
            }
        }
        pub fn PlaybackRate(&self) -> windows_core::Result<f64> {
            let this = &windows_core::Interface::cast::<ISystemMediaTransportControls2>(self)?;
            unsafe {
                let mut result__ = std::mem::zeroed();
                (windows_core::Interface::vtable(this).PlaybackRate)(
                    windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .map(|| result__)
            }
        }
        pub fn SetPlaybackRate(&self, value: f64) -> windows_core::Result<()> {
            let this = &windows_core::Interface::cast::<ISystemMediaTransportControls2>(self)?;
            unsafe {
                (windows_core::Interface::vtable(this).SetPlaybackRate)(
                    windows_core::Interface::as_raw(this),
                    value,
                )
                .ok()
            }
        }
        pub fn UpdateTimelineProperties<P0>(
            &self,
            timelineproperties: P0,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::IntoParam<SystemMediaTransportControlsTimelineProperties>,
        {
            let this = &windows_core::Interface::cast::<ISystemMediaTransportControls2>(self)?;
            unsafe {
                (windows_core::Interface::vtable(this).UpdateTimelineProperties)(
                    windows_core::Interface::as_raw(this),
                    timelineproperties.into_param().abi(),
                )
                .ok()
            }
        }
        pub fn PlaybackPositionChangeRequested<P0>(
            &self,
            handler: P0,
        ) -> windows_core::Result<super::Foundation::EventRegistrationToken>
        where
            P0: windows_core::IntoParam<
                super::Foundation::TypedEventHandler<
                    SystemMediaTransportControls,
                    PlaybackPositionChangeRequestedEventArgs,
                >,
            >,
        {
            let this = &windows_core::Interface::cast::<ISystemMediaTransportControls2>(self)?;
            unsafe {
                let mut result__ = std::mem::zeroed();
                (windows_core::Interface::vtable(this).PlaybackPositionChangeRequested)(
                    windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .map(|| result__)
            }
        }
        pub fn RemovePlaybackPositionChangeRequested(
            &self,
            token: super::Foundation::EventRegistrationToken,
        ) -> windows_core::Result<()> {
            let this = &windows_core::Interface::cast::<ISystemMediaTransportControls2>(self)?;
            unsafe {
                (windows_core::Interface::vtable(this).RemovePlaybackPositionChangeRequested)(
                    windows_core::Interface::as_raw(this),
                    token,
                )
                .ok()
            }
        }
        pub fn PlaybackRateChangeRequested<P0>(
            &self,
            handler: P0,
        ) -> windows_core::Result<super::Foundation::EventRegistrationToken>
        where
            P0: windows_core::IntoParam<
                super::Foundation::TypedEventHandler<
                    SystemMediaTransportControls,
                    PlaybackRateChangeRequestedEventArgs,
                >,
            >,
        {
            let this = &windows_core::Interface::cast::<ISystemMediaTransportControls2>(self)?;
            unsafe {
                let mut result__ = std::mem::zeroed();
                (windows_core::Interface::vtable(this).PlaybackRateChangeRequested)(
                    windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .map(|| result__)
            }
        }
        pub fn RemovePlaybackRateChangeRequested(
            &self,
            token: super::Foundation::EventRegistrationToken,
        ) -> windows_core::Result<()> {
            let this = &windows_core::Interface::cast::<ISystemMediaTransportControls2>(self)?;
            unsafe {
                (windows_core::Interface::vtable(this).RemovePlaybackRateChangeRequested)(
                    windows_core::Interface::as_raw(this),
                    token,
                )
                .ok()
            }
        }
        pub fn ShuffleEnabledChangeRequested<P0>(
            &self,
            handler: P0,
        ) -> windows_core::Result<super::Foundation::EventRegistrationToken>
        where
            P0: windows_core::IntoParam<
                super::Foundation::TypedEventHandler<
                    SystemMediaTransportControls,
                    ShuffleEnabledChangeRequestedEventArgs,
                >,
            >,
        {
            let this = &windows_core::Interface::cast::<ISystemMediaTransportControls2>(self)?;
            unsafe {
                let mut result__ = std::mem::zeroed();
                (windows_core::Interface::vtable(this).ShuffleEnabledChangeRequested)(
                    windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .map(|| result__)
            }
        }
        pub fn RemoveShuffleEnabledChangeRequested(
            &self,
            token: super::Foundation::EventRegistrationToken,
        ) -> windows_core::Result<()> {
            let this = &windows_core::Interface::cast::<ISystemMediaTransportControls2>(self)?;
            unsafe {
                (windows_core::Interface::vtable(this).RemoveShuffleEnabledChangeRequested)(
                    windows_core::Interface::as_raw(this),
                    token,
                )
                .ok()
            }
        }
        pub fn AutoRepeatModeChangeRequested<P0>(
            &self,
            handler: P0,
        ) -> windows_core::Result<super::Foundation::EventRegistrationToken>
        where
            P0: windows_core::IntoParam<
                super::Foundation::TypedEventHandler<
                    SystemMediaTransportControls,
                    AutoRepeatModeChangeRequestedEventArgs,
                >,
            >,
        {
            let this = &windows_core::Interface::cast::<ISystemMediaTransportControls2>(self)?;
            unsafe {
                let mut result__ = std::mem::zeroed();
                (windows_core::Interface::vtable(this).AutoRepeatModeChangeRequested)(
                    windows_core::Interface::as_raw(this),
                    handler.into_param().abi(),
                    &mut result__,
                )
                .map(|| result__)
            }
        }
        pub fn RemoveAutoRepeatModeChangeRequested(
            &self,
            token: super::Foundation::EventRegistrationToken,
        ) -> windows_core::Result<()> {
            let this = &windows_core::Interface::cast::<ISystemMediaTransportControls2>(self)?;
            unsafe {
                (windows_core::Interface::vtable(this).RemoveAutoRepeatModeChangeRequested)(
                    windows_core::Interface::as_raw(this),
                    token,
                )
                .ok()
            }
        }
        pub fn GetForCurrentView() -> windows_core::Result<SystemMediaTransportControls> {
            Self::ISystemMediaTransportControlsStatics(|this| unsafe {
                let mut result__ = std::mem::zeroed();
                (windows_core::Interface::vtable(this).GetForCurrentView)(
                    windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .and_then(|| windows_core::Type::from_abi(result__))
            })
        }
        #[doc(hidden)]
        pub fn ISystemMediaTransportControlsStatics<
            R,
            F: FnOnce(&ISystemMediaTransportControlsStatics) -> windows_core::Result<R>,
        >(
            callback: F,
        ) -> windows_core::Result<R> {
            static SHARED: windows_core::imp::FactoryCache<
                SystemMediaTransportControls,
                ISystemMediaTransportControlsStatics,
            > = windows_core::imp::FactoryCache::new();
            SHARED.call(callback)
        }
    }
    impl windows_core::RuntimeType for SystemMediaTransportControls {
        const SIGNATURE: windows_core::imp::ConstBuffer =
            windows_core::imp::ConstBuffer::for_class::<Self>();
    }
    unsafe impl windows_core::Interface for SystemMediaTransportControls {
        type Vtable = ISystemMediaTransportControls_Vtbl;
        const IID: windows_core::GUID =
            <ISystemMediaTransportControls as windows_core::Interface>::IID;
    }
    impl windows_core::RuntimeName for SystemMediaTransportControls {
        const NAME: &'static str = "Windows.Media.SystemMediaTransportControls";
    }
    unsafe impl Send for SystemMediaTransportControls {}
    unsafe impl Sync for SystemMediaTransportControls {}
    pub trait ISystemMediaTransportControls_Impl: Sized {
        fn PlaybackStatus(&self) -> windows_core::Result<MediaPlaybackStatus>;
        fn SetPlaybackStatus(&self, value: MediaPlaybackStatus) -> windows_core::Result<()>;
        fn DisplayUpdater(
            &self,
        ) -> windows_core::Result<SystemMediaTransportControlsDisplayUpdater>;
        fn SoundLevel(&self) -> windows_core::Result<SoundLevel>;
        fn IsEnabled(&self) -> windows_core::Result<bool>;
        fn SetIsEnabled(&self, value: bool) -> windows_core::Result<()>;
        fn IsPlayEnabled(&self) -> windows_core::Result<bool>;
        fn SetIsPlayEnabled(&self, value: bool) -> windows_core::Result<()>;
        fn IsStopEnabled(&self) -> windows_core::Result<bool>;
        fn SetIsStopEnabled(&self, value: bool) -> windows_core::Result<()>;
        fn IsPauseEnabled(&self) -> windows_core::Result<bool>;
        fn SetIsPauseEnabled(&self, value: bool) -> windows_core::Result<()>;
        fn IsRecordEnabled(&self) -> windows_core::Result<bool>;
        fn SetIsRecordEnabled(&self, value: bool) -> windows_core::Result<()>;
        fn IsFastForwardEnabled(&self) -> windows_core::Result<bool>;
        fn SetIsFastForwardEnabled(&self, value: bool) -> windows_core::Result<()>;
        fn IsRewindEnabled(&self) -> windows_core::Result<bool>;
        fn SetIsRewindEnabled(&self, value: bool) -> windows_core::Result<()>;
        fn IsPreviousEnabled(&self) -> windows_core::Result<bool>;
        fn SetIsPreviousEnabled(&self, value: bool) -> windows_core::Result<()>;
        fn IsNextEnabled(&self) -> windows_core::Result<bool>;
        fn SetIsNextEnabled(&self, value: bool) -> windows_core::Result<()>;
        fn IsChannelUpEnabled(&self) -> windows_core::Result<bool>;
        fn SetIsChannelUpEnabled(&self, value: bool) -> windows_core::Result<()>;
        fn IsChannelDownEnabled(&self) -> windows_core::Result<bool>;
        fn SetIsChannelDownEnabled(&self, value: bool) -> windows_core::Result<()>;
        fn ButtonPressed(
            &self,
            handler: Option<
                &super::Foundation::TypedEventHandler<
                    SystemMediaTransportControls,
                    SystemMediaTransportControlsButtonPressedEventArgs,
                >,
            >,
        ) -> windows_core::Result<super::Foundation::EventRegistrationToken>;
        fn RemoveButtonPressed(
            &self,
            token: &super::Foundation::EventRegistrationToken,
        ) -> windows_core::Result<()>;
        fn PropertyChanged(
            &self,
            handler: Option<
                &super::Foundation::TypedEventHandler<
                    SystemMediaTransportControls,
                    SystemMediaTransportControlsPropertyChangedEventArgs,
                >,
            >,
        ) -> windows_core::Result<super::Foundation::EventRegistrationToken>;
        fn RemovePropertyChanged(
            &self,
            token: &super::Foundation::EventRegistrationToken,
        ) -> windows_core::Result<()>;
    }
    impl windows_core::RuntimeName for ISystemMediaTransportControls {
        const NAME: &'static str = "Windows.Media.ISystemMediaTransportControls";
    }
    impl ISystemMediaTransportControls_Vtbl {
        pub const fn new<
            Identity: windows_core::IUnknownImpl<Impl = Impl>,
            Impl: ISystemMediaTransportControls_Impl,
            const OFFSET: isize,
        >() -> ISystemMediaTransportControls_Vtbl {
            unsafe extern "system" fn PlaybackStatus<
                Identity: windows_core::IUnknownImpl<Impl = Impl>,
                Impl: ISystemMediaTransportControls_Impl,
                const OFFSET: isize,
            >(
                this: *mut core::ffi::c_void,
                result__: *mut MediaPlaybackStatus,
            ) -> windows_core::HRESULT {
                let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                let this = (*this).get_impl();
                match this.PlaybackStatus() {
                    Ok(ok__) => {
                        core::ptr::write(result__, core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
            unsafe extern "system" fn SetPlaybackStatus<
                Identity: windows_core::IUnknownImpl<Impl = Impl>,
                Impl: ISystemMediaTransportControls_Impl,
                const OFFSET: isize,
            >(
                this: *mut core::ffi::c_void,
                value: MediaPlaybackStatus,
            ) -> windows_core::HRESULT {
                let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                let this = (*this).get_impl();
                this.SetPlaybackStatus(value).into()
            }
            unsafe extern "system" fn DisplayUpdater<
                Identity: windows_core::IUnknownImpl<Impl = Impl>,
                Impl: ISystemMediaTransportControls_Impl,
                const OFFSET: isize,
            >(
                this: *mut core::ffi::c_void,
                result__: *mut *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                let this = (*this).get_impl();
                match this.DisplayUpdater() {
                    Ok(ok__) => {
                        core::ptr::write(result__, core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
            unsafe extern "system" fn SoundLevel<
                Identity: windows_core::IUnknownImpl<Impl = Impl>,
                Impl: ISystemMediaTransportControls_Impl,
                const OFFSET: isize,
            >(
                this: *mut core::ffi::c_void,
                result__: *mut SoundLevel,
            ) -> windows_core::HRESULT {
                let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                let this = (*this).get_impl();
                match this.SoundLevel() {
                    Ok(ok__) => {
                        core::ptr::write(result__, core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
            unsafe extern "system" fn IsEnabled<
                Identity: windows_core::IUnknownImpl<Impl = Impl>,
                Impl: ISystemMediaTransportControls_Impl,
                const OFFSET: isize,
            >(
                this: *mut core::ffi::c_void,
                result__: *mut bool,
            ) -> windows_core::HRESULT {
                let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                let this = (*this).get_impl();
                match this.IsEnabled() {
                    Ok(ok__) => {
                        core::ptr::write(result__, core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
            unsafe extern "system" fn SetIsEnabled<
                Identity: windows_core::IUnknownImpl<Impl = Impl>,
                Impl: ISystemMediaTransportControls_Impl,
                const OFFSET: isize,
            >(
                this: *mut core::ffi::c_void,
                value: bool,
            ) -> windows_core::HRESULT {
                let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                let this = (*this).get_impl();
                this.SetIsEnabled(value).into()
            }
            unsafe extern "system" fn IsPlayEnabled<
                Identity: windows_core::IUnknownImpl<Impl = Impl>,
                Impl: ISystemMediaTransportControls_Impl,
                const OFFSET: isize,
            >(
                this: *mut core::ffi::c_void,
                result__: *mut bool,
            ) -> windows_core::HRESULT {
                let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                let this = (*this).get_impl();
                match this.IsPlayEnabled() {
                    Ok(ok__) => {
                        core::ptr::write(result__, core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
            unsafe extern "system" fn SetIsPlayEnabled<
                Identity: windows_core::IUnknownImpl<Impl = Impl>,
                Impl: ISystemMediaTransportControls_Impl,
                const OFFSET: isize,
            >(
                this: *mut core::ffi::c_void,
                value: bool,
            ) -> windows_core::HRESULT {
                let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                let this = (*this).get_impl();
                this.SetIsPlayEnabled(value).into()
            }
            unsafe extern "system" fn IsStopEnabled<
                Identity: windows_core::IUnknownImpl<Impl = Impl>,
                Impl: ISystemMediaTransportControls_Impl,
                const OFFSET: isize,
            >(
                this: *mut core::ffi::c_void,
                result__: *mut bool,
            ) -> windows_core::HRESULT {
                let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                let this = (*this).get_impl();
                match this.IsStopEnabled() {
                    Ok(ok__) => {
                        core::ptr::write(result__, core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
            unsafe extern "system" fn SetIsStopEnabled<
                Identity: windows_core::IUnknownImpl<Impl = Impl>,
                Impl: ISystemMediaTransportControls_Impl,
                const OFFSET: isize,
            >(
                this: *mut core::ffi::c_void,
                value: bool,
            ) -> windows_core::HRESULT {
                let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                let this = (*this).get_impl();
                this.SetIsStopEnabled(value).into()
            }
            unsafe extern "system" fn IsPauseEnabled<
                Identity: windows_core::IUnknownImpl<Impl = Impl>,
                Impl: ISystemMediaTransportControls_Impl,
                const OFFSET: isize,
            >(
                this: *mut core::ffi::c_void,
                result__: *mut bool,
            ) -> windows_core::HRESULT {
                let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                let this = (*this).get_impl();
                match this.IsPauseEnabled() {
                    Ok(ok__) => {
                        core::ptr::write(result__, core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
            unsafe extern "system" fn SetIsPauseEnabled<
                Identity: windows_core::IUnknownImpl<Impl = Impl>,
                Impl: ISystemMediaTransportControls_Impl,
                const OFFSET: isize,
            >(
                this: *mut core::ffi::c_void,
                value: bool,
            ) -> windows_core::HRESULT {
                let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                let this = (*this).get_impl();
                this.SetIsPauseEnabled(value).into()
            }
            unsafe extern "system" fn IsRecordEnabled<
                Identity: windows_core::IUnknownImpl<Impl = Impl>,
                Impl: ISystemMediaTransportControls_Impl,
                const OFFSET: isize,
            >(
                this: *mut core::ffi::c_void,
                result__: *mut bool,
            ) -> windows_core::HRESULT {
                let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                let this = (*this).get_impl();
                match this.IsRecordEnabled() {
                    Ok(ok__) => {
                        core::ptr::write(result__, core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
            unsafe extern "system" fn SetIsRecordEnabled<
                Identity: windows_core::IUnknownImpl<Impl = Impl>,
                Impl: ISystemMediaTransportControls_Impl,
                const OFFSET: isize,
            >(
                this: *mut core::ffi::c_void,
                value: bool,
            ) -> windows_core::HRESULT {
                let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                let this = (*this).get_impl();
                this.SetIsRecordEnabled(value).into()
            }
            unsafe extern "system" fn IsFastForwardEnabled<
                Identity: windows_core::IUnknownImpl<Impl = Impl>,
                Impl: ISystemMediaTransportControls_Impl,
                const OFFSET: isize,
            >(
                this: *mut core::ffi::c_void,
                result__: *mut bool,
            ) -> windows_core::HRESULT {
                let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                let this = (*this).get_impl();
                match this.IsFastForwardEnabled() {
                    Ok(ok__) => {
                        core::ptr::write(result__, core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
            unsafe extern "system" fn SetIsFastForwardEnabled<
                Identity: windows_core::IUnknownImpl<Impl = Impl>,
                Impl: ISystemMediaTransportControls_Impl,
                const OFFSET: isize,
            >(
                this: *mut core::ffi::c_void,
                value: bool,
            ) -> windows_core::HRESULT {
                let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                let this = (*this).get_impl();
                this.SetIsFastForwardEnabled(value).into()
            }
            unsafe extern "system" fn IsRewindEnabled<
                Identity: windows_core::IUnknownImpl<Impl = Impl>,
                Impl: ISystemMediaTransportControls_Impl,
                const OFFSET: isize,
            >(
                this: *mut core::ffi::c_void,
                result__: *mut bool,
            ) -> windows_core::HRESULT {
                let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                let this = (*this).get_impl();
                match this.IsRewindEnabled() {
                    Ok(ok__) => {
                        core::ptr::write(result__, core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
            unsafe extern "system" fn SetIsRewindEnabled<
                Identity: windows_core::IUnknownImpl<Impl = Impl>,
                Impl: ISystemMediaTransportControls_Impl,
                const OFFSET: isize,
            >(
                this: *mut core::ffi::c_void,
                value: bool,
            ) -> windows_core::HRESULT {
                let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                let this = (*this).get_impl();
                this.SetIsRewindEnabled(value).into()
            }
            unsafe extern "system" fn IsPreviousEnabled<
                Identity: windows_core::IUnknownImpl<Impl = Impl>,
                Impl: ISystemMediaTransportControls_Impl,
                const OFFSET: isize,
            >(
                this: *mut core::ffi::c_void,
                result__: *mut bool,
            ) -> windows_core::HRESULT {
                let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                let this = (*this).get_impl();
                match this.IsPreviousEnabled() {
                    Ok(ok__) => {
                        core::ptr::write(result__, core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
            unsafe extern "system" fn SetIsPreviousEnabled<
                Identity: windows_core::IUnknownImpl<Impl = Impl>,
                Impl: ISystemMediaTransportControls_Impl,
                const OFFSET: isize,
            >(
                this: *mut core::ffi::c_void,
                value: bool,
            ) -> windows_core::HRESULT {
                let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                let this = (*this).get_impl();
                this.SetIsPreviousEnabled(value).into()
            }
            unsafe extern "system" fn IsNextEnabled<
                Identity: windows_core::IUnknownImpl<Impl = Impl>,
                Impl: ISystemMediaTransportControls_Impl,
                const OFFSET: isize,
            >(
                this: *mut core::ffi::c_void,
                result__: *mut bool,
            ) -> windows_core::HRESULT {
                let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                let this = (*this).get_impl();
                match this.IsNextEnabled() {
                    Ok(ok__) => {
                        core::ptr::write(result__, core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
            unsafe extern "system" fn SetIsNextEnabled<
                Identity: windows_core::IUnknownImpl<Impl = Impl>,
                Impl: ISystemMediaTransportControls_Impl,
                const OFFSET: isize,
            >(
                this: *mut core::ffi::c_void,
                value: bool,
            ) -> windows_core::HRESULT {
                let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                let this = (*this).get_impl();
                this.SetIsNextEnabled(value).into()
            }
            unsafe extern "system" fn IsChannelUpEnabled<
                Identity: windows_core::IUnknownImpl<Impl = Impl>,
                Impl: ISystemMediaTransportControls_Impl,
                const OFFSET: isize,
            >(
                this: *mut core::ffi::c_void,
                result__: *mut bool,
            ) -> windows_core::HRESULT {
                let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                let this = (*this).get_impl();
                match this.IsChannelUpEnabled() {
                    Ok(ok__) => {
                        core::ptr::write(result__, core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
            unsafe extern "system" fn SetIsChannelUpEnabled<
                Identity: windows_core::IUnknownImpl<Impl = Impl>,
                Impl: ISystemMediaTransportControls_Impl,
                const OFFSET: isize,
            >(
                this: *mut core::ffi::c_void,
                value: bool,
            ) -> windows_core::HRESULT {
                let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                let this = (*this).get_impl();
                this.SetIsChannelUpEnabled(value).into()
            }
            unsafe extern "system" fn IsChannelDownEnabled<
                Identity: windows_core::IUnknownImpl<Impl = Impl>,
                Impl: ISystemMediaTransportControls_Impl,
                const OFFSET: isize,
            >(
                this: *mut core::ffi::c_void,
                result__: *mut bool,
            ) -> windows_core::HRESULT {
                let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                let this = (*this).get_impl();
                match this.IsChannelDownEnabled() {
                    Ok(ok__) => {
                        core::ptr::write(result__, core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
            unsafe extern "system" fn SetIsChannelDownEnabled<
                Identity: windows_core::IUnknownImpl<Impl = Impl>,
                Impl: ISystemMediaTransportControls_Impl,
                const OFFSET: isize,
            >(
                this: *mut core::ffi::c_void,
                value: bool,
            ) -> windows_core::HRESULT {
                let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                let this = (*this).get_impl();
                this.SetIsChannelDownEnabled(value).into()
            }
            unsafe extern "system" fn ButtonPressed<
                Identity: windows_core::IUnknownImpl<Impl = Impl>,
                Impl: ISystemMediaTransportControls_Impl,
                const OFFSET: isize,
            >(
                this: *mut core::ffi::c_void,
                handler: *mut core::ffi::c_void,
                result__: *mut super::Foundation::EventRegistrationToken,
            ) -> windows_core::HRESULT {
                let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                let this = (*this).get_impl();
                match this.ButtonPressed(windows_core::from_raw_borrowed(&handler)) {
                    Ok(ok__) => {
                        core::ptr::write(result__, core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
            unsafe extern "system" fn RemoveButtonPressed<
                Identity: windows_core::IUnknownImpl<Impl = Impl>,
                Impl: ISystemMediaTransportControls_Impl,
                const OFFSET: isize,
            >(
                this: *mut core::ffi::c_void,
                token: super::Foundation::EventRegistrationToken,
            ) -> windows_core::HRESULT {
                let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                let this = (*this).get_impl();
                this.RemoveButtonPressed(core::mem::transmute(&token))
                    .into()
            }
            unsafe extern "system" fn PropertyChanged<
                Identity: windows_core::IUnknownImpl<Impl = Impl>,
                Impl: ISystemMediaTransportControls_Impl,
                const OFFSET: isize,
            >(
                this: *mut core::ffi::c_void,
                handler: *mut core::ffi::c_void,
                result__: *mut super::Foundation::EventRegistrationToken,
            ) -> windows_core::HRESULT {
                let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                let this = (*this).get_impl();
                match this.PropertyChanged(windows_core::from_raw_borrowed(&handler)) {
                    Ok(ok__) => {
                        core::ptr::write(result__, core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
            unsafe extern "system" fn RemovePropertyChanged<
                Identity: windows_core::IUnknownImpl<Impl = Impl>,
                Impl: ISystemMediaTransportControls_Impl,
                const OFFSET: isize,
            >(
                this: *mut core::ffi::c_void,
                token: super::Foundation::EventRegistrationToken,
            ) -> windows_core::HRESULT {
                let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                let this = (*this).get_impl();
                this.RemovePropertyChanged(core::mem::transmute(&token))
                    .into()
            }
            Self {
                base__: windows_core::IInspectable_Vtbl::new::<
                    Identity,
                    ISystemMediaTransportControls,
                    OFFSET,
                >(),
                PlaybackStatus: PlaybackStatus::<Identity, Impl, OFFSET>,
                SetPlaybackStatus: SetPlaybackStatus::<Identity, Impl, OFFSET>,
                DisplayUpdater: DisplayUpdater::<Identity, Impl, OFFSET>,
                SoundLevel: SoundLevel::<Identity, Impl, OFFSET>,
                IsEnabled: IsEnabled::<Identity, Impl, OFFSET>,
                SetIsEnabled: SetIsEnabled::<Identity, Impl, OFFSET>,
                IsPlayEnabled: IsPlayEnabled::<Identity, Impl, OFFSET>,
                SetIsPlayEnabled: SetIsPlayEnabled::<Identity, Impl, OFFSET>,
                IsStopEnabled: IsStopEnabled::<Identity, Impl, OFFSET>,
                SetIsStopEnabled: SetIsStopEnabled::<Identity, Impl, OFFSET>,
                IsPauseEnabled: IsPauseEnabled::<Identity, Impl, OFFSET>,
                SetIsPauseEnabled: SetIsPauseEnabled::<Identity, Impl, OFFSET>,
                IsRecordEnabled: IsRecordEnabled::<Identity, Impl, OFFSET>,
                SetIsRecordEnabled: SetIsRecordEnabled::<Identity, Impl, OFFSET>,
                IsFastForwardEnabled: IsFastForwardEnabled::<Identity, Impl, OFFSET>,
                SetIsFastForwardEnabled: SetIsFastForwardEnabled::<Identity, Impl, OFFSET>,
                IsRewindEnabled: IsRewindEnabled::<Identity, Impl, OFFSET>,
                SetIsRewindEnabled: SetIsRewindEnabled::<Identity, Impl, OFFSET>,
                IsPreviousEnabled: IsPreviousEnabled::<Identity, Impl, OFFSET>,
                SetIsPreviousEnabled: SetIsPreviousEnabled::<Identity, Impl, OFFSET>,
                IsNextEnabled: IsNextEnabled::<Identity, Impl, OFFSET>,
                SetIsNextEnabled: SetIsNextEnabled::<Identity, Impl, OFFSET>,
                IsChannelUpEnabled: IsChannelUpEnabled::<Identity, Impl, OFFSET>,
                SetIsChannelUpEnabled: SetIsChannelUpEnabled::<Identity, Impl, OFFSET>,
                IsChannelDownEnabled: IsChannelDownEnabled::<Identity, Impl, OFFSET>,
                SetIsChannelDownEnabled: SetIsChannelDownEnabled::<Identity, Impl, OFFSET>,
                ButtonPressed: ButtonPressed::<Identity, Impl, OFFSET>,
                RemoveButtonPressed: RemoveButtonPressed::<Identity, Impl, OFFSET>,
                PropertyChanged: PropertyChanged::<Identity, Impl, OFFSET>,
                RemovePropertyChanged: RemovePropertyChanged::<Identity, Impl, OFFSET>,
            }
        }
        pub fn matches(iid: &windows_core::GUID) -> bool {
            iid == &<ISystemMediaTransportControls as windows_core::Interface>::IID
        }
    }
    windows_core::imp::com_interface!(
        ISystemMediaTransportControlsDisplayUpdater,
        ISystemMediaTransportControlsDisplayUpdater_Vtbl,
        0x8abbc53e_fa55_4ecf_ad8e_c984e5dd1550
    );
    #[repr(C)]
    pub struct ISystemMediaTransportControlsDisplayUpdater_Vtbl {
        pub base__: windows_core::IInspectable_Vtbl,
        pub Type: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut MediaPlaybackType,
        ) -> windows_core::HRESULT,
        pub SetType: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            MediaPlaybackType,
        ) -> windows_core::HRESULT,
        pub AppMediaId: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut std::mem::MaybeUninit<windows_core::HSTRING>,
        ) -> windows_core::HRESULT,
        pub SetAppMediaId: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            std::mem::MaybeUninit<windows_core::HSTRING>,
        ) -> windows_core::HRESULT,
        pub Thumbnail: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub SetThumbnail: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub MusicProperties: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub VideoProperties: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub ImageProperties: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub CopyFromFileAsync: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            MediaPlaybackType,
            *mut core::ffi::c_void,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
        pub ClearAll: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
        pub Update: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
    }
    #[repr(transparent)]
    #[derive(PartialEq, Eq, core::fmt::Debug, Clone)]
    pub struct SystemMediaTransportControlsDisplayUpdater(windows_core::IUnknown);
    windows_core::imp::interface_hierarchy!(
        SystemMediaTransportControlsDisplayUpdater,
        windows_core::IUnknown,
        windows_core::IInspectable
    );
    impl SystemMediaTransportControlsDisplayUpdater {
        pub fn Type(&self) -> windows_core::Result<MediaPlaybackType> {
            let this = self;
            unsafe {
                let mut result__ = std::mem::zeroed();
                (windows_core::Interface::vtable(this).Type)(
                    windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .map(|| result__)
            }
        }
        pub fn SetType(&self, value: MediaPlaybackType) -> windows_core::Result<()> {
            let this = self;
            unsafe {
                (windows_core::Interface::vtable(this).SetType)(
                    windows_core::Interface::as_raw(this),
                    value,
                )
                .ok()
            }
        }
        pub fn AppMediaId(&self) -> windows_core::Result<windows_core::HSTRING> {
            let this = self;
            unsafe {
                let mut result__ = std::mem::zeroed();
                (windows_core::Interface::vtable(this).AppMediaId)(
                    windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .and_then(|| windows_core::Type::from_abi(result__))
            }
        }
        pub fn SetAppMediaId(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
            let this = self;
            unsafe {
                (windows_core::Interface::vtable(this).SetAppMediaId)(
                    windows_core::Interface::as_raw(this),
                    core::mem::transmute_copy(value),
                )
                .ok()
            }
        }
        pub fn Thumbnail(
            &self,
        ) -> windows_core::Result<windows::Storage::Streams::RandomAccessStreamReference> {
            let this = self;
            unsafe {
                let mut result__ = std::mem::zeroed();
                (windows_core::Interface::vtable(this).Thumbnail)(
                    windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .and_then(|| windows_core::Type::from_abi(result__))
            }
        }
        pub fn SetThumbnail<P0>(&self, value: P0) -> windows_core::Result<()>
        where
            P0: windows_core::IntoParam<windows::Storage::Streams::RandomAccessStreamReference>,
        {
            let this = self;
            unsafe {
                (windows_core::Interface::vtable(this).SetThumbnail)(
                    windows_core::Interface::as_raw(this),
                    value.into_param().abi(),
                )
                .ok()
            }
        }
        pub fn MusicProperties(&self) -> windows_core::Result<MusicDisplayProperties> {
            let this = self;
            unsafe {
                let mut result__ = std::mem::zeroed();
                (windows_core::Interface::vtable(this).MusicProperties)(
                    windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .and_then(|| windows_core::Type::from_abi(result__))
            }
        }
        pub fn VideoProperties(&self) -> windows_core::Result<VideoDisplayProperties> {
            let this = self;
            unsafe {
                let mut result__ = std::mem::zeroed();
                (windows_core::Interface::vtable(this).VideoProperties)(
                    windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .and_then(|| windows_core::Type::from_abi(result__))
            }
        }
        pub fn ImageProperties(&self) -> windows_core::Result<ImageDisplayProperties> {
            let this = self;
            unsafe {
                let mut result__ = std::mem::zeroed();
                (windows_core::Interface::vtable(this).ImageProperties)(
                    windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .and_then(|| windows_core::Type::from_abi(result__))
            }
        }
        pub fn CopyFromFileAsync<P0>(
            &self,
            r#type: MediaPlaybackType,
            source: P0,
        ) -> windows_core::Result<super::Foundation::IAsyncOperation<bool>>
        where
            P0: windows_core::IntoParam<windows::Storage::StorageFile>,
        {
            let this = self;
            unsafe {
                let mut result__ = std::mem::zeroed();
                (windows_core::Interface::vtable(this).CopyFromFileAsync)(
                    windows_core::Interface::as_raw(this),
                    r#type,
                    source.into_param().abi(),
                    &mut result__,
                )
                .and_then(|| windows_core::Type::from_abi(result__))
            }
        }
        pub fn ClearAll(&self) -> windows_core::Result<()> {
            let this = self;
            unsafe {
                (windows_core::Interface::vtable(this).ClearAll)(windows_core::Interface::as_raw(
                    this,
                ))
                .ok()
            }
        }
        pub fn Update(&self) -> windows_core::Result<()> {
            let this = self;
            unsafe {
                (windows_core::Interface::vtable(this).Update)(windows_core::Interface::as_raw(
                    this,
                ))
                .ok()
            }
        }
    }
    impl windows_core::RuntimeType for SystemMediaTransportControlsDisplayUpdater {
        const SIGNATURE: windows_core::imp::ConstBuffer =
            windows_core::imp::ConstBuffer::for_class::<Self>();
    }
    unsafe impl windows_core::Interface for SystemMediaTransportControlsDisplayUpdater {
        type Vtable = ISystemMediaTransportControlsDisplayUpdater_Vtbl;
        const IID: windows_core::GUID =
            <ISystemMediaTransportControlsDisplayUpdater as windows_core::Interface>::IID;
    }
    impl windows_core::RuntimeName for SystemMediaTransportControlsDisplayUpdater {
        const NAME: &'static str = "Windows.Media.SystemMediaTransportControlsDisplayUpdater";
    }
    unsafe impl Send for SystemMediaTransportControlsDisplayUpdater {}
    unsafe impl Sync for SystemMediaTransportControlsDisplayUpdater {}
    pub trait ISystemMediaTransportControlsDisplayUpdater_Impl: Sized {
        fn Type(&self) -> windows_core::Result<MediaPlaybackType>;
        fn SetType(&self, value: MediaPlaybackType) -> windows_core::Result<()>;
        fn AppMediaId(&self) -> windows_core::Result<windows_core::HSTRING>;
        fn SetAppMediaId(&self, value: &windows_core::HSTRING) -> windows_core::Result<()>;
        fn Thumbnail(
            &self,
        ) -> windows_core::Result<windows::Storage::Streams::RandomAccessStreamReference>;
        fn SetThumbnail(
            &self,
            value: Option<&windows::Storage::Streams::RandomAccessStreamReference>,
        ) -> windows_core::Result<()>;
        fn MusicProperties(&self) -> windows_core::Result<MusicDisplayProperties>;
        fn VideoProperties(&self) -> windows_core::Result<VideoDisplayProperties>;
        fn ImageProperties(&self) -> windows_core::Result<ImageDisplayProperties>;
        fn CopyFromFileAsync(
            &self,
            r#type: MediaPlaybackType,
            source: Option<&windows::Storage::StorageFile>,
        ) -> windows_core::Result<super::Foundation::IAsyncOperation<bool>>;
        fn ClearAll(&self) -> windows_core::Result<()>;
        fn Update(&self) -> windows_core::Result<()>;
    }
    impl windows_core::RuntimeName for ISystemMediaTransportControlsDisplayUpdater {
        const NAME: &'static str = "Windows.Media.ISystemMediaTransportControlsDisplayUpdater";
    }
    impl ISystemMediaTransportControlsDisplayUpdater_Vtbl {
        pub const fn new<
            Identity: windows_core::IUnknownImpl<Impl = Impl>,
            Impl: ISystemMediaTransportControlsDisplayUpdater_Impl,
            const OFFSET: isize,
        >() -> ISystemMediaTransportControlsDisplayUpdater_Vtbl {
            unsafe extern "system" fn Type<
                Identity: windows_core::IUnknownImpl<Impl = Impl>,
                Impl: ISystemMediaTransportControlsDisplayUpdater_Impl,
                const OFFSET: isize,
            >(
                this: *mut core::ffi::c_void,
                result__: *mut MediaPlaybackType,
            ) -> windows_core::HRESULT {
                let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                let this = (*this).get_impl();
                match this.Type() {
                    Ok(ok__) => {
                        core::ptr::write(result__, core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
            unsafe extern "system" fn SetType<
                Identity: windows_core::IUnknownImpl<Impl = Impl>,
                Impl: ISystemMediaTransportControlsDisplayUpdater_Impl,
                const OFFSET: isize,
            >(
                this: *mut core::ffi::c_void,
                value: MediaPlaybackType,
            ) -> windows_core::HRESULT {
                let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                let this = (*this).get_impl();
                this.SetType(value).into()
            }
            unsafe extern "system" fn AppMediaId<
                Identity: windows_core::IUnknownImpl<Impl = Impl>,
                Impl: ISystemMediaTransportControlsDisplayUpdater_Impl,
                const OFFSET: isize,
            >(
                this: *mut core::ffi::c_void,
                result__: *mut std::mem::MaybeUninit<windows_core::HSTRING>,
            ) -> windows_core::HRESULT {
                let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                let this = (*this).get_impl();
                match this.AppMediaId() {
                    Ok(ok__) => {
                        core::ptr::write(result__, core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
            unsafe extern "system" fn SetAppMediaId<
                Identity: windows_core::IUnknownImpl<Impl = Impl>,
                Impl: ISystemMediaTransportControlsDisplayUpdater_Impl,
                const OFFSET: isize,
            >(
                this: *mut core::ffi::c_void,
                value: std::mem::MaybeUninit<windows_core::HSTRING>,
            ) -> windows_core::HRESULT {
                let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                let this = (*this).get_impl();
                this.SetAppMediaId(core::mem::transmute(&value)).into()
            }
            unsafe extern "system" fn Thumbnail<
                Identity: windows_core::IUnknownImpl<Impl = Impl>,
                Impl: ISystemMediaTransportControlsDisplayUpdater_Impl,
                const OFFSET: isize,
            >(
                this: *mut core::ffi::c_void,
                result__: *mut *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                let this = (*this).get_impl();
                match this.Thumbnail() {
                    Ok(ok__) => {
                        core::ptr::write(result__, core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
            unsafe extern "system" fn SetThumbnail<
                Identity: windows_core::IUnknownImpl<Impl = Impl>,
                Impl: ISystemMediaTransportControlsDisplayUpdater_Impl,
                const OFFSET: isize,
            >(
                this: *mut core::ffi::c_void,
                value: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                let this = (*this).get_impl();
                this.SetThumbnail(windows_core::from_raw_borrowed(&value))
                    .into()
            }
            unsafe extern "system" fn MusicProperties<
                Identity: windows_core::IUnknownImpl<Impl = Impl>,
                Impl: ISystemMediaTransportControlsDisplayUpdater_Impl,
                const OFFSET: isize,
            >(
                this: *mut core::ffi::c_void,
                result__: *mut *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                let this = (*this).get_impl();
                match this.MusicProperties() {
                    Ok(ok__) => {
                        core::ptr::write(result__, core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
            unsafe extern "system" fn VideoProperties<
                Identity: windows_core::IUnknownImpl<Impl = Impl>,
                Impl: ISystemMediaTransportControlsDisplayUpdater_Impl,
                const OFFSET: isize,
            >(
                this: *mut core::ffi::c_void,
                result__: *mut *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                let this = (*this).get_impl();
                match this.VideoProperties() {
                    Ok(ok__) => {
                        core::ptr::write(result__, core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
            unsafe extern "system" fn ImageProperties<
                Identity: windows_core::IUnknownImpl<Impl = Impl>,
                Impl: ISystemMediaTransportControlsDisplayUpdater_Impl,
                const OFFSET: isize,
            >(
                this: *mut core::ffi::c_void,
                result__: *mut *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                let this = (*this).get_impl();
                match this.ImageProperties() {
                    Ok(ok__) => {
                        core::ptr::write(result__, core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
            unsafe extern "system" fn CopyFromFileAsync<
                Identity: windows_core::IUnknownImpl<Impl = Impl>,
                Impl: ISystemMediaTransportControlsDisplayUpdater_Impl,
                const OFFSET: isize,
            >(
                this: *mut core::ffi::c_void,
                r#type: MediaPlaybackType,
                source: *mut core::ffi::c_void,
                result__: *mut *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                let this = (*this).get_impl();
                match this.CopyFromFileAsync(r#type, windows_core::from_raw_borrowed(&source)) {
                    Ok(ok__) => {
                        core::ptr::write(result__, core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
            unsafe extern "system" fn ClearAll<
                Identity: windows_core::IUnknownImpl<Impl = Impl>,
                Impl: ISystemMediaTransportControlsDisplayUpdater_Impl,
                const OFFSET: isize,
            >(
                this: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                let this = (*this).get_impl();
                this.ClearAll().into()
            }
            unsafe extern "system" fn Update<
                Identity: windows_core::IUnknownImpl<Impl = Impl>,
                Impl: ISystemMediaTransportControlsDisplayUpdater_Impl,
                const OFFSET: isize,
            >(
                this: *mut core::ffi::c_void,
            ) -> windows_core::HRESULT {
                let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                let this = (*this).get_impl();
                this.Update().into()
            }
            Self {
                base__: windows_core::IInspectable_Vtbl::new::<
                    Identity,
                    ISystemMediaTransportControlsDisplayUpdater,
                    OFFSET,
                >(),
                Type: Type::<Identity, Impl, OFFSET>,
                SetType: SetType::<Identity, Impl, OFFSET>,
                AppMediaId: AppMediaId::<Identity, Impl, OFFSET>,
                SetAppMediaId: SetAppMediaId::<Identity, Impl, OFFSET>,
                Thumbnail: Thumbnail::<Identity, Impl, OFFSET>,
                SetThumbnail: SetThumbnail::<Identity, Impl, OFFSET>,
                MusicProperties: MusicProperties::<Identity, Impl, OFFSET>,
                VideoProperties: VideoProperties::<Identity, Impl, OFFSET>,
                ImageProperties: ImageProperties::<Identity, Impl, OFFSET>,
                CopyFromFileAsync: CopyFromFileAsync::<Identity, Impl, OFFSET>,
                ClearAll: ClearAll::<Identity, Impl, OFFSET>,
                Update: Update::<Identity, Impl, OFFSET>,
            }
        }
        pub fn matches(iid: &windows_core::GUID) -> bool {
            iid == &<ISystemMediaTransportControlsDisplayUpdater as windows_core::Interface>::IID
        }
    }

    windows_core::imp::com_interface!(
        IMusicDisplayProperties,
        IMusicDisplayProperties_Vtbl,
        0x6bbf0c59_d0a0_4d26_92a0_f978e1d18e7b
    );
    #[repr(C)]
    pub struct IMusicDisplayProperties_Vtbl {
        pub base__: windows_core::IInspectable_Vtbl,
        pub Title: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut std::mem::MaybeUninit<windows_core::HSTRING>,
        ) -> windows_core::HRESULT,
        pub SetTitle: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            std::mem::MaybeUninit<windows_core::HSTRING>,
        ) -> windows_core::HRESULT,
        pub AlbumArtist: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut std::mem::MaybeUninit<windows_core::HSTRING>,
        ) -> windows_core::HRESULT,
        pub SetAlbumArtist: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            std::mem::MaybeUninit<windows_core::HSTRING>,
        ) -> windows_core::HRESULT,
        pub Artist: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut std::mem::MaybeUninit<windows_core::HSTRING>,
        ) -> windows_core::HRESULT,
        pub SetArtist: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            std::mem::MaybeUninit<windows_core::HSTRING>,
        ) -> windows_core::HRESULT,
    }
    #[repr(transparent)]
    #[derive(PartialEq, Eq, core::fmt::Debug, Clone)]
    pub struct MusicDisplayProperties(windows_core::IUnknown);
    windows_core::imp::interface_hierarchy!(
        MusicDisplayProperties,
        windows_core::IUnknown,
        windows_core::IInspectable
    );
    impl MusicDisplayProperties {
        pub fn Title(&self) -> windows_core::Result<windows_core::HSTRING> {
            let this = self;
            unsafe {
                let mut result__ = std::mem::zeroed();
                (windows_core::Interface::vtable(this).Title)(
                    windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .and_then(|| windows_core::Type::from_abi(result__))
            }
        }
        pub fn SetTitle(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
            let this = self;
            unsafe {
                (windows_core::Interface::vtable(this).SetTitle)(
                    windows_core::Interface::as_raw(this),
                    core::mem::transmute_copy(value),
                )
                .ok()
            }
        }
        pub fn AlbumArtist(&self) -> windows_core::Result<windows_core::HSTRING> {
            let this = self;
            unsafe {
                let mut result__ = std::mem::zeroed();
                (windows_core::Interface::vtable(this).AlbumArtist)(
                    windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .and_then(|| windows_core::Type::from_abi(result__))
            }
        }
        pub fn SetAlbumArtist(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
            let this = self;
            unsafe {
                (windows_core::Interface::vtable(this).SetAlbumArtist)(
                    windows_core::Interface::as_raw(this),
                    core::mem::transmute_copy(value),
                )
                .ok()
            }
        }
        pub fn Artist(&self) -> windows_core::Result<windows_core::HSTRING> {
            let this = self;
            unsafe {
                let mut result__ = std::mem::zeroed();
                (windows_core::Interface::vtable(this).Artist)(
                    windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .and_then(|| windows_core::Type::from_abi(result__))
            }
        }
        pub fn SetArtist(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
            let this = self;
            unsafe {
                (windows_core::Interface::vtable(this).SetArtist)(
                    windows_core::Interface::as_raw(this),
                    core::mem::transmute_copy(value),
                )
                .ok()
            }
        }
        pub fn AlbumTitle(&self) -> windows_core::Result<windows_core::HSTRING> {
            let this = &windows_core::Interface::cast::<IMusicDisplayProperties2>(self)?;
            unsafe {
                let mut result__ = std::mem::zeroed();
                (windows_core::Interface::vtable(this).AlbumTitle)(
                    windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .and_then(|| windows_core::Type::from_abi(result__))
            }
        }
        pub fn SetAlbumTitle(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
            let this = &windows_core::Interface::cast::<IMusicDisplayProperties2>(self)?;
            unsafe {
                (windows_core::Interface::vtable(this).SetAlbumTitle)(
                    windows_core::Interface::as_raw(this),
                    core::mem::transmute_copy(value),
                )
                .ok()
            }
        }
        pub fn TrackNumber(&self) -> windows_core::Result<u32> {
            let this = &windows_core::Interface::cast::<IMusicDisplayProperties2>(self)?;
            unsafe {
                let mut result__ = std::mem::zeroed();
                (windows_core::Interface::vtable(this).TrackNumber)(
                    windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .map(|| result__)
            }
        }
        pub fn SetTrackNumber(&self, value: u32) -> windows_core::Result<()> {
            let this = &windows_core::Interface::cast::<IMusicDisplayProperties2>(self)?;
            unsafe {
                (windows_core::Interface::vtable(this).SetTrackNumber)(
                    windows_core::Interface::as_raw(this),
                    value,
                )
                .ok()
            }
        }
        pub fn Genres(
            &self,
        ) -> windows_core::Result<super::Foundation::Collections::IVector<windows_core::HSTRING>>
        {
            let this = &windows_core::Interface::cast::<IMusicDisplayProperties2>(self)?;
            unsafe {
                let mut result__ = std::mem::zeroed();
                (windows_core::Interface::vtable(this).Genres)(
                    windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .and_then(|| windows_core::Type::from_abi(result__))
            }
        }
        pub fn AlbumTrackCount(&self) -> windows_core::Result<u32> {
            let this = &windows_core::Interface::cast::<IMusicDisplayProperties3>(self)?;
            unsafe {
                let mut result__ = std::mem::zeroed();
                (windows_core::Interface::vtable(this).AlbumTrackCount)(
                    windows_core::Interface::as_raw(this),
                    &mut result__,
                )
                .map(|| result__)
            }
        }
        pub fn SetAlbumTrackCount(&self, value: u32) -> windows_core::Result<()> {
            let this = &windows_core::Interface::cast::<IMusicDisplayProperties3>(self)?;
            unsafe {
                (windows_core::Interface::vtable(this).SetAlbumTrackCount)(
                    windows_core::Interface::as_raw(this),
                    value,
                )
                .ok()
            }
        }
    }
    impl windows_core::RuntimeType for MusicDisplayProperties {
        const SIGNATURE: windows_core::imp::ConstBuffer =
            windows_core::imp::ConstBuffer::for_class::<Self>();
    }
    unsafe impl windows_core::Interface for MusicDisplayProperties {
        type Vtable = IMusicDisplayProperties_Vtbl;
        const IID: windows_core::GUID = <IMusicDisplayProperties as windows_core::Interface>::IID;
    }
    impl windows_core::RuntimeName for MusicDisplayProperties {
        const NAME: &'static str = "Windows.Media.MusicDisplayProperties";
    }
    unsafe impl Send for MusicDisplayProperties {}
    unsafe impl Sync for MusicDisplayProperties {}
    pub trait IMusicDisplayProperties_Impl: Sized {
        fn Title(&self) -> windows_core::Result<windows_core::HSTRING>;
        fn SetTitle(&self, value: &windows_core::HSTRING) -> windows_core::Result<()>;
        fn AlbumArtist(&self) -> windows_core::Result<windows_core::HSTRING>;
        fn SetAlbumArtist(&self, value: &windows_core::HSTRING) -> windows_core::Result<()>;
        fn Artist(&self) -> windows_core::Result<windows_core::HSTRING>;
        fn SetArtist(&self, value: &windows_core::HSTRING) -> windows_core::Result<()>;
    }
    impl windows_core::RuntimeName for IMusicDisplayProperties {
        const NAME: &'static str = "Windows.Media.IMusicDisplayProperties";
    }
    impl IMusicDisplayProperties_Vtbl {
        pub const fn new<
            Identity: windows_core::IUnknownImpl<Impl = Impl>,
            Impl: IMusicDisplayProperties_Impl,
            const OFFSET: isize,
        >() -> IMusicDisplayProperties_Vtbl {
            unsafe extern "system" fn Title<
                Identity: windows_core::IUnknownImpl<Impl = Impl>,
                Impl: IMusicDisplayProperties_Impl,
                const OFFSET: isize,
            >(
                this: *mut core::ffi::c_void,
                result__: *mut std::mem::MaybeUninit<windows_core::HSTRING>,
            ) -> windows_core::HRESULT {
                let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                let this = (*this).get_impl();
                match this.Title() {
                    Ok(ok__) => {
                        core::ptr::write(result__, core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
            unsafe extern "system" fn SetTitle<
                Identity: windows_core::IUnknownImpl<Impl = Impl>,
                Impl: IMusicDisplayProperties_Impl,
                const OFFSET: isize,
            >(
                this: *mut core::ffi::c_void,
                value: std::mem::MaybeUninit<windows_core::HSTRING>,
            ) -> windows_core::HRESULT {
                let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                let this = (*this).get_impl();
                this.SetTitle(core::mem::transmute(&value)).into()
            }
            unsafe extern "system" fn AlbumArtist<
                Identity: windows_core::IUnknownImpl<Impl = Impl>,
                Impl: IMusicDisplayProperties_Impl,
                const OFFSET: isize,
            >(
                this: *mut core::ffi::c_void,
                result__: *mut std::mem::MaybeUninit<windows_core::HSTRING>,
            ) -> windows_core::HRESULT {
                let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                let this = (*this).get_impl();
                match this.AlbumArtist() {
                    Ok(ok__) => {
                        core::ptr::write(result__, core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
            unsafe extern "system" fn SetAlbumArtist<
                Identity: windows_core::IUnknownImpl<Impl = Impl>,
                Impl: IMusicDisplayProperties_Impl,
                const OFFSET: isize,
            >(
                this: *mut core::ffi::c_void,
                value: std::mem::MaybeUninit<windows_core::HSTRING>,
            ) -> windows_core::HRESULT {
                let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                let this = (*this).get_impl();
                this.SetAlbumArtist(core::mem::transmute(&value)).into()
            }
            unsafe extern "system" fn Artist<
                Identity: windows_core::IUnknownImpl<Impl = Impl>,
                Impl: IMusicDisplayProperties_Impl,
                const OFFSET: isize,
            >(
                this: *mut core::ffi::c_void,
                result__: *mut std::mem::MaybeUninit<windows_core::HSTRING>,
            ) -> windows_core::HRESULT {
                let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                let this = (*this).get_impl();
                match this.Artist() {
                    Ok(ok__) => {
                        core::ptr::write(result__, core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
            unsafe extern "system" fn SetArtist<
                Identity: windows_core::IUnknownImpl<Impl = Impl>,
                Impl: IMusicDisplayProperties_Impl,
                const OFFSET: isize,
            >(
                this: *mut core::ffi::c_void,
                value: std::mem::MaybeUninit<windows_core::HSTRING>,
            ) -> windows_core::HRESULT {
                let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                let this = (*this).get_impl();
                this.SetArtist(core::mem::transmute(&value)).into()
            }
            Self {
                base__: windows_core::IInspectable_Vtbl::new::<
                    Identity,
                    IMusicDisplayProperties,
                    OFFSET,
                >(),
                Title: Title::<Identity, Impl, OFFSET>,
                SetTitle: SetTitle::<Identity, Impl, OFFSET>,
                AlbumArtist: AlbumArtist::<Identity, Impl, OFFSET>,
                SetAlbumArtist: SetAlbumArtist::<Identity, Impl, OFFSET>,
                Artist: Artist::<Identity, Impl, OFFSET>,
                SetArtist: SetArtist::<Identity, Impl, OFFSET>,
            }
        }
        pub fn matches(iid: &windows_core::GUID) -> bool {
            iid == &<IMusicDisplayProperties as windows_core::Interface>::IID
        }
    }

    windows_core::imp::com_interface!(
        IMusicDisplayProperties2,
        IMusicDisplayProperties2_Vtbl,
        0x00368462_97d3_44b9_b00f_008afcefaf18
    );
    #[repr(C)]
    pub struct IMusicDisplayProperties2_Vtbl {
        pub base__: windows_core::IInspectable_Vtbl,
        pub AlbumTitle: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut std::mem::MaybeUninit<windows_core::HSTRING>,
        ) -> windows_core::HRESULT,
        pub SetAlbumTitle: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            std::mem::MaybeUninit<windows_core::HSTRING>,
        ) -> windows_core::HRESULT,
        pub TrackNumber:
            unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
        pub SetTrackNumber:
            unsafe extern "system" fn(*mut core::ffi::c_void, u32) -> windows_core::HRESULT,
        pub Genres: unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    }
}
